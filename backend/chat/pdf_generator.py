"""
PDF generation for chat interactions
"""

import os
import tempfile
from datetime import datetime
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER
from django.conf import settings


def generate_chat_pdf(session_id, messages, title="Chat Session"):
    """
    Generate a PDF of chat interactions
    """
    # Create temporary file
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
    temp_path = temp_file.name
    temp_file.close()
    
    # Create PDF document
    doc = SimpleDocTemplate(
        temp_path,
        pagesize=A4,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=18
    )
    
    # Get styles
    styles = getSampleStyleSheet()
    
    # Create custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.darkblue
    )
    
    user_style = ParagraphStyle(
        'UserMessage',
        parent=styles['Normal'],
        fontSize=10,
        leftIndent=20,
        rightIndent=100,
        spaceAfter=12,
        borderColor=colors.blue,
        borderWidth=1,
        borderPadding=8,
        backColor=colors.lightblue
    )
    
    assistant_style = ParagraphStyle(
        'AssistantMessage',
        parent=styles['Normal'],
        fontSize=10,
        leftIndent=100,
        rightIndent=20,
        spaceAfter=12,
        borderColor=colors.green,
        borderWidth=1,
        borderPadding=8,
        backColor=colors.lightgreen
    )
    
    # Build content
    story = []
    
    # Title
    story.append(Paragraph(f"Chat Session: {title}", title_style))
    story.append(Spacer(1, 12))
    
    # Session info
    session_info = f"Session ID: {session_id}<br/>Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}<br/>Total Messages: {len(messages)}"
    story.append(Paragraph(session_info, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Messages
    for i, message in enumerate(messages, 1):
        # Message header
        timestamp = message.get('timestamp', '')
        if isinstance(timestamp, str):
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                timestamp = dt.strftime('%Y-%m-%d %H:%M:%S')
            except:
                timestamp = str(timestamp)
        else:
            timestamp = str(timestamp)
        
        role = message.get('role', 'unknown')
        content = message.get('content', '')
        
        # Clean content for PDF
        content = content.replace('\n', '<br/>')
        content = content.replace('<', '&lt;').replace('>', '&gt;')
        
        # Message number and timestamp
        header = f"<b>Message {i}</b> - {role.title()} - {timestamp}"
        story.append(Paragraph(header, styles['Heading3']))
        
        # Message content
        if role == 'user':
            story.append(Paragraph(content, user_style))
        else:
            story.append(Paragraph(content, assistant_style))
        
        story.append(Spacer(1, 12))
    
    # Footer
    story.append(Spacer(1, 20))
    footer = f"<i>Generated by AI Chatbot - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
    story.append(Paragraph(footer, styles['Normal']))
    
    # Build PDF
    doc.build(story)
    
    return temp_path


def generate_chat_html(session_id, messages, title="Chat Session"):
    """
    Generate HTML version of chat for better PDF conversion
    """
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>{title}</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                line-height: 1.6;
            }}
            .header {{
                text-align: center;
                border-bottom: 2px solid #333;
                padding-bottom: 20px;
                margin-bottom: 30px;
            }}
            .message {{
                margin-bottom: 20px;
                padding: 15px;
                border-radius: 10px;
                border-left: 4px solid;
            }}
            .user-message {{
                background-color: #e3f2fd;
                border-left-color: #2196f3;
                margin-right: 50px;
            }}
            .assistant-message {{
                background-color: #f3e5f5;
                border-left-color: #9c27b0;
                margin-left: 50px;
            }}
            .message-header {{
                font-weight: bold;
                margin-bottom: 10px;
                color: #333;
            }}
            .message-content {{
                white-space: pre-wrap;
            }}
            .footer {{
                text-align: center;
                margin-top: 40px;
                padding-top: 20px;
                border-top: 1px solid #ccc;
                color: #666;
            }}
        </style>
    </head>
    <body>
        <div class="header">
            <h1>{title}</h1>
            <p>Session ID: {session_id}</p>
            <p>Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            <p>Total Messages: {len(messages)}</p>
        </div>
    """
    
    for i, message in enumerate(messages, 1):
        role = message.get('role', 'unknown')
        content = message.get('content', '')
        timestamp = message.get('timestamp', '')
        
        if isinstance(timestamp, str):
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                timestamp = dt.strftime('%Y-%m-%d %H:%M:%S')
            except:
                timestamp = str(timestamp)
        else:
            timestamp = str(timestamp)
        
        message_class = 'user-message' if role == 'user' else 'assistant-message'
        
        html_content += f"""
        <div class="message {message_class}">
            <div class="message-header">
                Message {i} - {role.title()} - {timestamp}
            </div>
            <div class="message-content">{content}</div>
        </div>
        """
    
    html_content += f"""
        <div class="footer">
            <p>Generated by AI Chatbot - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
    </body>
    </html>
    """
    
    return html_content
